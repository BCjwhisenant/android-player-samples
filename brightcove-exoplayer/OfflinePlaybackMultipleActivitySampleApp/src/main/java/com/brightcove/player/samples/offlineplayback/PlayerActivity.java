package com.brightcove.player.samples.offlineplayback;

import android.content.Intent;
import android.content.res.Configuration;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.util.Log;
import android.widget.ArrayAdapter;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.brightcove.player.edge.Catalog;
import com.brightcove.player.edge.OfflineCallback;
import com.brightcove.player.edge.OfflineCatalog;
import com.brightcove.player.edge.VideoListener;
import com.brightcove.player.event.EventEmitter;
import com.brightcove.player.event.EventType;
import com.brightcove.player.model.Video;
import com.brightcove.player.network.ConnectivityMonitor;
import com.brightcove.player.network.HttpRequestConfig;
import com.brightcove.player.samples.offlineplayback.utils.ViewUtil;
import com.brightcove.player.view.BrightcovePlayer;

import java.util.concurrent.TimeUnit;

/**
 * An activity that displays a list of videos that can be downloaded.
 */
public class PlayerActivity extends BrightcovePlayer {
    /**
     * The name that will be used to tag the events generated by this class.
     */
    private static final String TAG = MainActivity.class.getSimpleName();

    /**
     * Reference to the video cloud catalog client.
     */
    private OfflineCatalog catalog;

    /**
     * Network connectivity state change monitor.
     */
    private ConnectivityMonitor connectivityMonitor;

    VideoModel videoModel;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_player);

        onCreate();
    }

    @Override
    protected void onStart() {
        super.onStart();
        ConnectivityMonitor.getInstance(this).addListener(connectivityListener);
//        catalog.addDownloadEventListener(downloadEventListener);
        updateVideoList();
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();

        if (isFinishing()) {
            ConnectivityMonitor.getInstance(this).removeListener(connectivityListener);
//            catalog.removeDownloadEventListener(downloadEventListener);
        }
    }

    /**
     * Sets up the view when created.
     */
    private void onCreate() {
        connectivityMonitor = ConnectivityMonitor.getInstance(this);
        Intent playerIntent = getIntent();
        String videoId = playerIntent.getStringExtra("videoId");

        brightcoveVideoView = ViewUtil.findView(this, R.id.brightcove_video_view);
        EventEmitter eventEmitter = brightcoveVideoView.getEventEmitter();

        catalog = new OfflineCatalog.Builder(this, eventEmitter, MainActivity.ACCOUNT_ID)
                .setBaseURL(Catalog.DEFAULT_EDGE_BASE_URL)
                .setPolicy(MainActivity.POLICY_KEY)
                .build();

        videoModel = VideoModel.byId(videoId, "Offline Video");

        //Configure downloads through the catalog.
        catalog.setMobileDownloadAllowed(true);
        catalog.setMeteredDownloadAllowed(false);
        catalog.setRoamingDownloadAllowed(false);

        // Setup an adapter to render the videoModel items in the spinner view Adapter that
        // will be used to bind the videoModel spinner to the underlying data source.
        ArrayAdapter<PlaylistModel> playlistAdapter = new ArrayAdapter<>(this,
                android.R.layout.simple_spinner_item/*, playlistNames*/);
        playlistAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    }

    private void updateVideoList() {
        if (connectivityMonitor.isConnected()) {
            HttpRequestConfig httpRequestConfig = new HttpRequestConfig.Builder().build();
            videoModel.findVideo(catalog, httpRequestConfig, new VideoListener() {
                @Override
                public void onVideo(Video video) {
                    brightcoveVideoView.add(video);
                }

                @Override
                public void onError(@NonNull String error) {
                    String message = showToast("Failed to find videoModel[%s]: %s", videoModel.displayName, error);
                    Log.w(TAG, message);
                }
            });
        } else {
            catalog.findOfflineVideoById(
                    videoModel.id,
                    new OfflineCallback<Video>() {
                        @Override
                        public void onSuccess(Video video) {
                            brightcoveVideoView.add(video);
                        }

                        @Override
                        public void onFailure(Throwable throwable) {
                            Log.e(TAG, "Error fetching all videos downloaded: ", throwable);
                        }
                    });
        }
    }

    @Override
    public void onConfigurationChanged(Configuration configuration) {
        super.onConfigurationChanged(configuration);

        if (configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            if (!brightcoveVideoView.isFullScreen()) {
                brightcoveVideoView.getEventEmitter().emit(EventType.ENTER_FULL_SCREEN);
            }
        } else if (configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
            if (brightcoveVideoView.isFullScreen()) {
                brightcoveVideoView.getEventEmitter().emit(EventType.EXIT_FULL_SCREEN);
            }
        }
    }

    /**
     * Implements a {@link com.brightcove.player.network.ConnectivityMonitor.Listener} that will
     * update the current video list based on network connectivity state.
     */
    private final ConnectivityMonitor.Listener connectivityListener = new ConnectivityMonitor.Listener() {
        public void onConnectivityChanged(boolean connected, @Nullable NetworkInfo networkInfo) {
            updateVideoList();
        }
    };

    /**
     * Shows a formatted toast message.
     *
     * @param message    the message to be shown. The message may include string format tokens.
     * @param parameters the parameters to be used for formatting the message.
     * @return the formatted message that was shown.
     * @see String#format(String, Object...)
     */
    private String showToast(@NonNull String message, @Nullable Object... parameters) {
        if (parameters != null) {
            message = String.format(message, parameters);
        }
        Toast.makeText(PlayerActivity.this, message, Toast.LENGTH_SHORT).show();

        return message;
    }

}
